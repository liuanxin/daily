 在 centos 的系统中初始化机器
#+BEGIN_SRC bash
# javac 在 java-1.8.0-openjdk-devel 包里面
yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel git subversion

adduser admin
passwd admin
usermod -aG wheel admin

mkdir backup bash config logs server source project tool web

echo "" > README
echo "backup  : 备份目录" >> README
echo "bash    : 脚本目录" >> README
echo "config  : 外部配置文件, 如 https 证书等" >> README
echo "logs    : 日志目录" >> README
echo "server  : 项目对应 tomcat(如果有的话) 的目录" >> README
echo "source  : 源码目录" >> README
echo "project : 发布包目录" >> README
echo "temp    : 临时目录" >> README
echo "tool    : 工具包目录" >> README
echo "web     : 前端目录, 被 nginx 指向" >> README
echo "" >> README
chown admin:admin -R /home/admin


echo "" >> /etc/bashrc
echo "" >> /etc/bashrc
echo "JAVA_HOME=$(readlink -f /usr/bin/java | sed 's:bin/java::')" | sudo tee -a /etc/bashrc

wget https://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
tar axf apache-maven-3.6.3-bin.tar.gz && mv apache-maven-3.6.3 /opt/
ln -s apache-maven-3.6.3 maven

echo "" >> /etc/bashrc
echo "MAVEN_HOME=/opt/maven" >> /etc/bashrc
echo "PATH=$PATH:$MAVEN_HOME/bin" >> /etc/bashrc
echo "" >> /etc/bashrc
echo "export PATH JAVA_HOME MAVEN_HOME" >> /etc/bashrc
echo "" >> /etc/bashrc

source /etc/bashrc
#+END_SRC

如果使用的是 tomcat
#+BEGIN_SRC bash
wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.42/bin/apache-tomcat-8.5.42.tar.gz
tar axf apache-tomcat-8.5.42.tar.gz && mv apache-tomcat-8.5.42 ~/server/
# 如果有多个 web 服务, 就把 tomcat 复制多个, 改成相关的项目名
# 当然, 还得去改里面的端口配置以及将 webapps 中的所有文件删除
#+END_SRC
然后在要发布的 tomcat/conf/server.xml 文件中, 最底下的 host 节点中添加下面的配置
#+BEGIN_SRC xml
<!--
  path 置空, 这样用 http://ip:port 就是项目地址了, 不需要再带上 path
  docBase 用全目录, 不要将 war 包放进 webapps 目录来发布, 这样能避免一些发布时的缓存问题
-->
<Context path="" docBase="/home/admin/project/xxx.war" reloadable="true" />
#+END_SRC

在每个 tomcat 的 bin 目录下新建 setenv.sh 文件来写配置(不要直接写到 catalina.sh 中, catalina.sh 文件最前面有详细注释)
#+BEGIN_SRC bash
#!/bin/env bash

# 当前运行环境
profile="test"
# 当前项目名
project="platform"

# 放 gc 日志和 dump 文件的目录
log="/home/$(whoami)/logs"

if [ ! -d "${log}" ]; then
  mkdir -p ${log}
fi

# gc 的 dump 日志
# dump="${log}/dump-${project}"
# if [ ! -d "${dump}" ]; then
#   mkdir -p ${dump}
# fi

# gc 日志
gc_file="${log}/gc-${project}-${profile}-$(date +%F).log"

# 如果使用 apr 的话
# CATALINA_OPTS="$CATALINA_OPTS -Djava.library.path=/usr/local/apr/lib"

JAVA_OPTS="$JAVA_OPTS -server"
JAVA_OPTS="$JAVA_OPTS -Xms512M -Xmx512M -Dfile.encoding=UTF-8 -XX:+UseG1GC"
# JAVA_OPTS="$JAVA_OPTS -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${dump}"
# JAVA_OPTS="$JAVA_OPTS -verbose:gc -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M"
# JAVA_OPTS="$JAVA_OPTS -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -Xloggc:${gc_file}"
JAVA_OPTS="$JAVA_OPTS -Djava.security.egd=file:/dev/./urandom"
JAVA_OPTS="$JAVA_OPTS -Dspring.profiles.active=${profile}"

export CATALINA_OPTS JAVA_OPTS
#+END_SRC

复制下面的内容写成 settings.xml 到 ~/home/admin/.m2~ 下
#+BEGIN_SRC xml
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
    <!--
    <servers>
        <server>
            <id>company-nexus</id>
            <username>xxx</username>
            <password><![CDATA[xxxxx]]></password>
        </server>
    </servers>
    -->
    
    <mirrors>
        <mirror>
            <id>aliyun</id>
            <name>aliyun maven</name>
            <mirrorOf>central</mirrorOf>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
        </mirror>
    </mirrors>

    <profiles>
        <profile>
            <id>company</id>
            <repositories>
                <repository>
                    <id>aliyun</id>
                    <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
                    <releases><enabled>true</enabled></releases>
                    <snapshots><enabled>false</enabled></snapshots>
                </repository>

                <!-- 如果有用到私服可以解开当前注释, 私服如果需要权限, 只要 id 跟上面 server 中的 id 一致即可 -->
                <!--
                <repository>
                    <id>company-nexus</id>
                    <url>http://ip:port/repository/maven-snapshots/</url>
                    <releases><enabled>false</enabled></releases>
                    <snapshots>
                        <enabled>true</enabled>
                        <updatePolicy>always</updatePolicy>
                        <checksumPolicy>fail</checksumPolicy>
                    </snapshots>
                </repository>
                -->
            </repositories>

            <pluginRepositories>
                <pluginRepository>
                    <id>aliyun-plugin</id>
                    <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
                    <releases><enabled>true</enabled></releases>
                    <snapshots><enabled>false</enabled></snapshots>
                </pluginRepository>

                <!--
                <pluginRepository>
                    <id>shucang-nexus</id>
                    <url>http://ip:port/repository/maven-snapshots/</url>
                    <releases><enabled>false</enabled></releases>
                    <snapshots>
                        <enabled>true</enabled>
                        <updatePolicy>always</updatePolicy>
                        <checksumPolicy>fail</checksumPolicy>
                    </snapshots>
                </pluginRepository>
                -->
            </pluginRepositories>
        </profile>
    </profiles>

    <activeProfiles>
        <activeProfile>company</activeProfile>
    </activeProfiles>
</settings>
#+END_SRC


测试环境的一键部署脚本
#+BEGIN_SRC bash
#!/usr/bin/env bash

now="$(date +%Y%m%d%H%M%S)"
current_file="$(readlink -f $0)"

print_error() {
    echo -e "\033[31m[error] ------------------------------------------------------------------------\033[0m"
    echo -e "\033[31m[error] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}\033[0m" # 红
    echo -e "\033[31m[error] ------------------------------------------------------------------------\033[0m"
}
error_and_exit() {
    print_error "$1"
    exit 1
}

if [ "root" == "$(whoami)" ]; then
    error_and_exit "不要使用 root 运行此脚本! 请切换成普通用户!"
fi

check_directory() {
    if [ ! -d "${1}" ]; then
        error_and_exit "目录 ${1} 不存在, 无法完成此操作"
    fi
}
check_create_directory() {
    if [ ! -d "${1}" ]; then
        mkdir -p "$1"
    fi
}
check_file() {
    if [ ! -e "${1}" ]; then
        error_and_exit "文件 ${1} 不存在, 无法完成此操作"
    fi
}
log() {
    echo "[INFO] ------------------------------------------------------------------------"
    echo -e "[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}"
    echo "[INFO] ------------------------------------------------------------------------"
}
print_info() {
    echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
    echo -e "\033[34m[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}\033[0m" # 蓝. 30(黑), 32(绿), 33(黄), 35(紫), 36(天蓝), 37(白)
    echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
}


source="/home/$(whoami)/source"
console_log="/home/$(whoami)/logs"
version_url="http://127.0.0.1:3000/java"
jvm_args="${jvm_args} -Dfile.encoding=UTF-8 -Djava.security.egd=file:/dev/./urandom"


module_name_arr+=("xxx")
module_desc_arr+=("xxx模块")
module_profile_arr+=("test")
module_package_arr+=("xxx-server")
module_path_arr+=("/path/xxx")
module_file_arr+=("xxx-server.jar")
module_jvm_arr+=("-Xms512M -Xmx512M -XX:MetaspaceSize=128M -XX:MaxMetaspaceSize=128M")

module_name_arr+=("yyy")
module_desc_arr+=("yyy模块")
module_profile_arr+=("test")
module_package_arr+=("yyy-server")
module_path_arr+=("/path/yyy")
module_file_arr+=("yyy-server.jar")
module_jvm_arr+=("-Xms1024M -Xmx1024M -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M")


# 从版本控制更新代码, 为打包做准备
update() {
    desc="${1}"
    package="${2}"
    branch="${3}"
    log "开始更新「${desc}」代码"
    check_create_directory "${source}"

    cd "${source}"
    if [ -d "${package}" ]; then
        cd "${package}"
        log "git pull"
        git pull
        log "代码「${name}」拉取完成"
    else
        log "git clone ${version_url}/${package}"
        git clone ${version_url}/${package}
        log "代码「${desc}」克隆完成"
    fi
    log "当前分支 --> $(git rev-parse --abbrev-ref HEAD)"
    git log --pretty=format:'[%Cred%h%Creset] (%C(yellow)%ad%Creset) [%Cgreen%s%Creset] (%C(bold blue)%cr%Creset) <%Cred%an%Creset>' | head -n 10

    if [ "${branch}" != '' ]; then
        print_info "切换到 ${branch} 分支或版本"
        git checkout "${branch}"

        log "目前分支 --> $(git rev-parse --abbrev-ref HEAD)"
        git log --pretty=format:'[%Cred%h%Creset] (%C(yellow)%ad%Creset) [%Cgreen%s%Creset] (%C(bold blue)%cr%Creset) <%Cred%an%Creset>' | head -n 10
    fi
}
# 使用 maven 编译打包代码
compile() {
    desc="${1}"
    package="${2}"
    check_directory "${source}/${package}"

    log "开始打包「${desc}」代码"
    cd "${source}/${package}"
    rm -fr ~/.m2/repository/com/youdiancx
    mvn clean package -DskipTests
    log "代码「${desc}」打包完成"
}

kill_jar() {
    if [ "$#" != 1 ] || [ -z "$1" ]; then
        error_and_exit "usage: kill_jar \"运行的 jar 包路径\""
    fi
    process="$(ps aux | grep ${1} | grep java | grep -v grep | awk '{print $2}')"
    log "项目「${1}」进程号: (${process})"
    if [ -n "${process}" ]; then
        log "杀掉「${1}」进程: ${process}"
        kill "${process}"
        check_process "${1}"
    fi
}
check_process() {
    sleep 2
    process="$(ps aux | grep ${1} | grep java | grep -v grep | awk '{print $2}')"
    if [ -n "${process}" ]; then
        log "进程「${process}」还在"
        check_process "${1}"
    fi
}
start_jar() {
    check_file "$1"
    echo "$(readlink -f /bin/java) $2 -jar ${1} >${console_log}/console-${3}-${now}.log 2>&1 &"
    $(readlink -f /bin/java) $2 -jar ${1} >${console_log}/console-${3}-${now}.log 2>&1 &
    sleep 5
    log "进程 ${1} 信息:\n$(ps aux | grep -v grep | grep java | grep --color=auto ${1})"
}
release_jar() {
    check_directory "${source}"
    comment="$1"
    package="$2"
    file_name="$3"
    project_jvm_args="$4"
    path="$5"
    name="$6"

    release="${source}/${package}/target/${file_name}"
    if [ ! -e "${release}" ]; then
        error_and_exit "没有此发布包: ${release}, 请确认是否有打包代码"
    fi

    check_create_directory "${path}"
    cd "${path}"
    current_release="${path}/${file_name}"

    log "开始发布「${comment}」"
    kill_jar "${current_release}"
    rm -fr "${current_release}"
    mv "${release}" "${current_release}"
    start_jar "${current_release}" "${project_jvm_args}" "${name}"
    log "「${comment}」发布完成"
}

usage() {
    echo "usage:"
    echo ""
    for i in "${!module_name_arr[@]}"; do
        name="${module_name_arr[$i]}"
        desc="${module_desc_arr[$i]}"
        file="${module_file_arr[$i]}"
        if [ -n "${name}" ] && [ -n "${desc}" ] && [ -n "${file}" ]; then
            echo "  「${current_file} ${name} {version}」 部署「${desc}」, {version} 表示分支或版本号, 不传则使用上次使用的分支"
            echo "  「${current_file} restart-${name}」   重启「${desc}」"
            echo "  「${current_file} start-${name}」     启动「${desc}」"
            echo "  「${current_file} stop-${name}」      停止「${desc}」"
            echo ""
        fi
    done
}


case "$1" in
    *)
        for i in "${!module_name_arr[@]}"; do
            name="${module_name_arr[$i]}"
            desc="${module_desc_arr[$i]}"
            profile="${module_profile_arr[$i]}"
            package="${module_package_arr[$i]}"
            file_path="${module_path_arr[$i]}"
            file="${module_file_arr[$i]}"
            args="${module_jvm_arr[$i]}"

            run_args="${jvm_args} ${args} -Dspring.profiles.active=${profile} -Dproject.name=${package} -Dname=${name}"

            if [ "$1" = "${name}" ]; then
                update "${desc}" "${package}" "$2"
                compile "${desc}" "${package}"
                release_jar "${desc}" "${package}" "${file}" "${run_args}" "${file_path}" "${name}"
                exit 1
            elif [ "$1" = "restart-${name}" ]; then
                kill_jar "${file_path}/${file}"
                start_jar "${file_path}/${file}" "${run_args}" "${name}"
                exit 1
            elif [ "$1" = "start-${name}" ]; then
                start_jar "${file_path}/${file}" "${run_args}" "${name}"
                exit 1
            elif [ "$1" = "stop-${name}" ]; then
                kill_jar "${file_path}/${file}"
                exit 1
            fi
        done
        usage
esac
exit 1
#+END_SRC
通常来说, 线上服务器不需要直接连到版本控制, 此时: 先用一台可以连上版本控制的机器下载代码并压缩再上传到线上服务器, 再去服务器校验文件并打包发布

写在一台可以连上版本控制的机器上, 由此机器向线上服务器推源码
#+BEGIN_SRC bash
#!/bin/env bash

now="$(date '+%Y-%m-%d-%H-%M-%S')"

red() {
    echo -e "\033[31m[INFO] ------------------------------------------------------------------------\033[0m"
    echo -e "\033[31m[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}\033[0m"
    echo -e "\033[31m[INFO] ------------------------------------------------------------------------\033[0m"
}
log_red() {
    red "$1"
    echo ${1} >> "${log_path}/online.log"
}
error_and_exit() {
    red "$1"
    exit 1
}

if [ "root" == "$(whoami)" ]; then
    error_and_exit "不要使用 root 运行此脚本! 请切换成普通用户!"
fi

print_log() {
    echo "[INFO] ------------------------------------------------------------------------"
    echo -e "[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}"
    echo "[INFO] ------------------------------------------------------------------------"
}
print_info() {
    echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
    echo -e "\033[34m[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}\033[0m"
    echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
}

now="$(date '+%Y-%m-%d-%H-%M-%S')"
current_file="$(readlink -f $0)"

work_dir="/home/$(whoami)"    # 工作目录
project="xxxyyyzzz"           # 项目名
source="${work_dir}/source"   # 源码目录

# 版本地址
version_url="http://ip:port/origin/project.git"

online_project_file="${project}-export"           # 传输时用到的文件名
online_upload_path="${work_dir}/source/"          # 源码存放目录
online_release_file="${work_dir}/bash/release.sh" # 线上的发布脚本全路径

# 导出并上传源码到指定服务器
online() {
    # -eq 等于, -ne 不等于, -gt 大于, -lt 小于, ge 大于等于, le 小于等于
    if [ "$#" -lt 2 ] || [ -z "$1" ] || [ -z "$2" ]; then
        error_and_exit "usage: online \"user\" \"ip\" \"branch(optional)\""
    fi
    
    user="$1"
    ip="$2"
    release_online="${user}@${ip}:${online_upload_path}"

    print_log "开始导出代码"
    cd "${source}"
    # 每次都用全新的版本
    rm -fr "${online_project_file}"
    
    print_log "git clone ${version_url} ${project}"
    git clone ${version_url} ${online_project_file}
    log "当前分支 --> $(git rev-parse --abbrev-ref HEAD)"
    git log --pretty=format:'[%Cred%h%Creset] (%C(yellow)%ad%Creset) [%Cgreen%s%Creset] (%C(bold blue)%cr%Creset) <%Cred%an%Creset>' | head -n 10
    cd ${online_project_file}
    if [ "$3" != '' ]; then
        print_info "切换到 $3 分支或版本"
        git checkout $3
        log "当前分支 --> $(git rev-parse --abbrev-ref HEAD)"
        git log --pretty=format:'[%Cred%h%Creset] (%C(yellow)%ad%Creset) [%Cgreen%s%Creset] (%C(bold blue)%cr%Creset) <%Cred%an%Creset>' | head -n 10
    fi
    rm -fr .git*
    print_log "代码导出完成"

    print_log "开始上传到指定环境"
    cd "${source}"
    if [ ! -e ${online_project_file} ]; then
        error_and_exit "没有 ${source}/${online_project_file} 文件, 无法上传"
    fi

    file_name="${project}-${now}.tgz"
    tar acf "${file_name}" "${online_project_file}"

    md5="$(md5sum ${file_name} | awk '{print $1}')"
    print_info "压缩包(${file_name})的 md5 值是: ${md5}, 文件大小为: $(du -sh ${file_name} | awk '{print $1}')"
    print_log "scp ${source}/${file_name} ${release_online}"
    # 服务器可以用 google-auth 开启二次验证, 此处可以用公钥免密码传输
    time scp -qr "${source}/${file_name}" "${release_online}" || exit 1
    rm -fr "${source}/${file_name}"
    
    print_info "登录到(${ip})上使用下面命令行发布"

    print_info "公共模块 ${online_release_file} module-0-common/common-server ${now} ${md5}"
    print_info "用户模块 ${online_release_file} module-1-user/user-server ${now} ${md5}"
    print_info "商品模块 ${online_release_file} module-2-product/product-server ${now} ${md5}"
    print_info "订单模块 ${online_release_file} module-7-order/order-server ${now} ${md5}"
    print_info "后端项目 ${online_release_file} web-platform ${now} ${md5}"
    print_info "后台管理 ${online_release_file} web-manager ${now} ${md5}"
    print_info "定时任务 ${online_release_file} zero-task ${now} ${md5}"
    
    log_red "${online_release_file} all ${now} ${md5}; rm -fr ${online_upload_path}*"
    print_log "上传完成"
}

case "$1" in
    abc)
        online "admin" "xxx.yyy.zzz.abc"
        ;;
    xyz)
        online "admin" "123.123.123.xyz"
        ;;
    *)
        echo "usage:"
        echo "  「${current_file} abc」  上传源码到(xxx.yyy.zzz.abc)环境"
        echo "  「${current_file} xyz」  上传源码到(123.123.123.xyz)环境"
esac
exit 1
#+END_SRC

线上的发布脚本
#+BEGIN_SRC bash
#!/bin/env bash

now="$(date '+%Y-%m-%d-%H-%M-%S')"

print_error() {
    echo -e "\033[31m[error] ------------------------------------------------------------------------\033[0m"
    echo -e "\033[31m[error] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}\033[0m" # 红
    echo -e "\033[31m[error] ------------------------------------------------------------------------\033[0m"
}
error_and_exit() {
    print_error "$1"
    exit 1
}

if [ "root" == "$(whoami)" ]; then
    error_and_exit "不要使用 root 运行此脚本! 请切换成普通用户!"
fi

check_directory() {
    if [ ! -d "${1}" ]; then
        error_and_exit "目录 ${1} 不存在, 无法完成此操作"
    fi
}
check_create_directory() {
    if [ ! -d "${1}" ]; then
        mkdir -p "$1"
    fi
}
check_file() {
    if [ ! -e "${1}" ]; then
        error_and_exit "文件 ${1} 不存在, 无法完成此操作"
    fi
}
log_in_file() {
    check_create_directory ${log_path}
    print_info "${1}"
    echo ${1} >> "${log_path}/INSTALL.log"
}
log() {
    echo "[INFO] ------------------------------------------------------------------------"
    echo -e "[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}"
    echo "[INFO] ------------------------------------------------------------------------"
}
print_info() {
    echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
    echo -e "\033[34m[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}\033[0m" # 蓝. 30(黑), 32(绿), 33(黄), 35(紫), 36(天蓝), 37(白)
    echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
}

current_file="$(readlink -f $0)"
now="$(date '+%Y-%m-%d-%H-%M-%S')"

work_dir="/home/$(whoami)"    # 工作目录
project="xxxyyyzzz"           # 项目名
source="${work_dir}/source"   # 源码目录
publish="${work_dir}/project" # 发布目录
backup="${work_dir}/backup"   # 备份目录
log_path="${work_dir}/logs"   # 日志目录

profile="prod"                # 当前环境


jvm_args="${jvm_args} -server"
jvm_args="${jvm_args} -Xms512m -Xmx512m -Dfile.encoding=UTF-8 -XX:+UseG1GC"
# jvm_args="${jvm_args} -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M"
# jvm_args="${jvm_args} -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps"
jvm_args="${jvm_args} -Djava.security.egd=file:/dev/./urandom"
jvm_args="${jvm_args} -Dspring.profiles.active=${profile}"
# jvm_args="${jvm_args} -Ddubbo.reference.check=false"


# 项目模块, 主要是「模块的包名、说明、最终打成 jar 包的文件名」三个参数, batch 为 1 表示全局发布的时候包含进去

module_name_arr+=("module-1-common/common-server")
module_desc_arr+=("公共模块")
module_file_arr+=("common-8081")
module_batch_arr+=("1")

module_name_arr+=("module-2-user/user-server")
module_desc_arr+=("用户模块")
module_file_arr+=("user-8082")
module_batch_arr+=("1")

module_name_arr+=("module-3-product/product-server")
module_desc_arr+=("商品模块")
module_file_arr+=("product-8083")
module_batch_arr+=("1")

module_name_arr+=("module-4-order/order-server")
module_desc_arr+=("订单模块")
module_file_arr+=("order-8084")
module_batch_arr+=("1")


module_name_arr+=("web-backend")
module_desc_arr+=("web 后台")
module_file_arr+=("web-backend-8090")
module_batch_arr+=("1")

module_name_arr+=("web-manager")
module_desc_arr+=("后台管理")
module_file_arr+=("web-manager-8100")
module_batch_arr+=("1")

module_name_arr+=("zero-task")
module_desc_arr+=("定时任务")
module_file_arr+=("zero-task-8200")
module_batch_arr+=("0")


# 检查代码包的 md5 值并解压, 为编译做准备
check() {
    log "开始检查代码"
    # -eq 等于, -ne 不等于, -gt 大于, -lt 小于, ge 大于等于, le 小于等于
    if [ "$#" -lt 2 ] || [ -z "$1" ] || [ -z "$2" ]; then
        error_and_exit "usage: check \"发布的时间戳\" \"压缩包的 md5 值\""
    fi
    check_directory "${source}"

    cd "${source}"
    file_name="${project}-${1}.tgz"
    check_file "${file_name}"

    md5=$(md5sum ${file_name} | awk '{print $1}')
    print_info "file md5 info: $(md5sum ${file_name})"
    print_info "send md5 info: ${2}"
    if [ "${md5}" != "${2}" ]; then
        error_and_exit "文件的 md5 与传入的值不一致!"
    fi

    tar axf "${file_name}"
    rm -fr "${project}"
    mv "${project}-export" "${project}"
    log "代码检查通过"
}

# 使用 maven 编译打包代码
compile() {
    check_directory "${source}/${project}"

    if [ -e "/etc/profile" ]; then
        source /etc/profile
    fi
    if [ -e "/etc/bashrc" ]; then
        source /etc/bashrc
    fi
    if [ -e "/etc/bash.bashrc" ]; then
        source /etc/bash.bashr
    fi
    log "开始打包代码"
    cd "${source}/${project}"
    if [ "$#" -gt 0 ]; then
        # http://books.sonatype.com/mvnref-book/reference/_using_advanced_reactor_options.html
        # 参数 -pl 指定需要打包的项目列表, -am 同时打包相关的依赖
        echo "mvn -DskipTests clean package -pl $* -am"
        mvn -DskipTests clean package -pl "$*" -am
    else
        mvn -DskipTests clean package
    fi
    log "代码打包完成"
}


# 杀掉 jar 进程
kill_jar() {
    if [ "$#" != 1 ] || [ -z "$1" ]; then
        error_and_exit "usage: kill_jar \"运行的 jar 包路径\""
    fi
    process="$(ps aux | grep ${1} | grep java | grep -v grep | awk '{print $2}')"
    log "项目 ${1} 进程号: (${process})"
    if [ -n "${process}" ]; then
        log "杀掉 ${1} 进程: ${process}"
        kill "${process}"
        check_process "${1}"
    fi
}
check_process() {
    sleep 2
    process="$(ps aux | grep ${1} | grep java | grep -v grep | awk '{print $2}')"
    if [ -n "${process}" ]; then
        log "进程 ${process} 还在"
        check_process "${1}"
    fi
}


# 启动 jar 进程
start_jar() {
    if [ "$#" != 2 ] || [ -z "$1" ] || [ -z "$2" ]; then
        error_and_exit "usage: start_jar \"运行的 jar 包路径\" \"gc 文件名\""
    fi

    check_file "$1"
    # echo "$(readlink -f /bin/java) ${jvm_args} -Xloggc:${log_path}/${2} -jar ${1} &"
    $(readlink -f /bin/java) ${jvm_args} -jar ${1} &
    sleep 8
    log "进程 ${1} 信息:\n$(ps aux | grep -v grep | grep java | grep --color=auto ${1})"
}
# 发布 jar 包项目
release_jar() {
    check_directory "${source}"
    if [ "$#" != 3 ] || [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
        error_and_exit "usage: release_jar \"发布包文字说明\" \"模块名\" \"文件名(不带后缀)\""
    fi
    comment="$1"
    package="$2"
    file_name="$3"
    gc_file="gc-${package}-%{profile}-$(date +%F).log"
    gc_file="${gc_log//\//-}"  # / 替换成 -, 也可以写成 ////-, 格式: //old/new
    revert="revert_${package}"

    suffix="jar"
    release="${source}/${project}/${package}/target/${file_name}.${suffix}"
    if [ ! -e "${release}" ]; then
        error_and_exit "没有此发布包: ${release}, 请确认是否有打包代码"
    fi

    check_create_directory ${publish}/${file_name}
    current_release="${publish}/${file_name}/${file_name}.${suffix}"
    backup_release="${backup}/${file_name}-${now}.${suffix}"

    log "开始发布「${comment}」"
    backup_project "${current_release}" "${backup_release}" "${revert}"
    kill_jar "${current_release}"
    rm -fr "${current_release}"
    mv "${release}" "${current_release}"
    start_jar "${current_release}" "${gc_file}"
    log "「${comment}」发布完成"
}
# 还原 jar 包项目
revert_jar() {
    if [ "$#" != 4 ] || [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
        error_and_exit "usage: revert_jar \"还原包文字说明\" \"模块名\" \"文件名(不带后缀)\" \"还原包的时间戳\""
    fi
    comment="$1"
    package="$2"
    file_name="$3"
    gc_file="gc-${package}.log"
    time="$4"

    suffix="jar"
    backup_file="${backup}/${package}-${time}.${suffix}"
    if [ ! -e "${backup_file}" ]; then
        error_and_exit "没有此还原包: ${backup_file}"
    fi

    current_release="${publish}/${file_name}/${file_name}.${suffix}"

    log "开始还原「${comment}」"
    kill_jar "${current_release}"
    rm -fr "${current_release}"
    cp -R "${backup_file}" "${current_release}"
    start_jar "${current_release}" "${gc_file}"
    log "「${comment}」还原完成"
}

# 备份现有的发布包
backup_project() {
    check_create_directory ${backup}
    if [ "$#" != 3 ] || [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
        error_and_exit "usage: backup_project \"发布包文件路径\" \"备份的文件路径\" \"还原指令\""
    fi
    if [ -e "${1}" ]; then
        log "复制包 cp ${1} ${2}"
        touch "${1}"
        cp "${1}" "${2}"
        
        log "删除 12 个小时以前的备份文件 => find ${backup} -mmin +720 -type f | grep -v "${2}" | xargs rm -fr"
        find "${backup}" -mmin +720 -type f | grep -v "${2}" | xargs rm -fr
        log_in_file "运行 ${current_file} ${3} ${now} 还原之前的「${1}」版本"
    fi
}

# 杀掉 tomcat 进程
kill_tomcat() {
    if [ "$#" != 1 ] || [ -z "$1" ]; then
        error_and_exit "usage: kill_tomcat \"全路径的 tomcat 目录\""
    fi
    
    process="$(ps aux | grep ${1} | grep java | grep -v grep | awk '{print $2}')"
    echo "项目 ${1} 进程号: (${process})"
    ${1}/bin/shutdown.sh && sleep 2
    process="$(ps aux | grep ${1} | grep java | grep -v grep | awk '{print $2}')"
    if [ -n "${process}" ]; then
        log "杀掉 ${1} 进程: ${process}"
        kill "${process}"
        check_process "${1}"
    fi
}

check_process() {
    sleep 2
    process="$(ps aux | grep ${1} | grep java | grep -v grep | awk '{print $2}')"
    if [ -n "${process}" ]; then
        log "进程 ${process} 还在"
        check_process "${1}"
    fi
}
# 启动 tomcat 进程
start_tomcat() {
    if [ "$#" != 1 ] || [ -z "$1" ]; then
        error_and_exit "usage: start_tomcat \"尾部有 / 的全路径的 tomcat 目录\""
    fi

    check_directory "$1"

    echo "rm -fr ${1}logs/* ${1}webapps/* ${1}work/*"
    rm -fr ${1}logs/* ${1}webapps/* ${1}work/*
    ${1}/bin/startup.sh && sleep 2
    log "进程 ${1} 信息:\n$(ps aux | grep -v grep | grep java | grep --color=auto ${1})"
}
# 发布 tomcat 项目
release_tomcat() {
    check_directory "${source}"
    if [ "$#" != 3 ] || [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
        error_and_exit "usage: release_tomcat \"发布包文字说明\" \"全路径的 tomcat 目录\" \"发布时的包名\""
    fi
    comment="$1"
    tomcat="$2"
    package="$3"
    check_directory "${tomcat}"

    suffix="war"
    release="${source}/${project}/${package}/target/${package}.${suffix}.original"
    if [ ! -e "${release}" ]; then
        error_and_exit "没有此发布包: ${release}, 请确认是否有打包代码"
    fi

    current_release="${publish}/${package}.${suffix}"
    backup_release="${backup}/${package##*/}-${now}.${suffix}"

    log "开始发布「${comment}」"
    backup_project "${current_release}" "${backup_release}" "revert_${package##*/}"
    kill_tomcat "${tomcat}"
    rm -fr "${current_release}"
    mv ${release} ${current_release}
    start_tomcat "${tomcat}"
    log "「${comment}」发布完成"
}
# 还原 tomcat 项目
revert_tomcat() {
    if [ "$#" != 4 ] || [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
        error_and_exit "usage: revert_tomcat \"还原包文字说明\" \"全路径的 tomcat 目录\" \"发布时的包名\" \"还原包的时间戳\""
    fi
    comment="$1"
    tomcat="$2"
    package="$3"
    time="$4"
    check_directory "${tomcat}"

    suffix="war"
    backup_file="${backup}/${package}-${time}.${suffix}"
    if [ ! -e "${backup_file}" ]; then
        error_and_exit "没有此还原包: ${backup_file}"
    fi

    current_release="${publish}/${package}.${suffix}"
    log "开始还原「${comment}」"

    kill_tomcat "${tomcat}"
    rm -fr "${current_release}"
    cp -R "${backup_file}" "${current_release}"
    start_tomcat "${tomcat}"

    log "「${comment}」还原完成"
}
usage() {
    echo "usage:"
    echo "  「${current_file} restart」     打包及发布需要频繁更新的模块(公共,用户,商品,订单)"
    echo ""
    for i in ${!module_name_arr[@]}; do
        name="${module_name_arr[$i]}"
        desc="${module_desc_arr[$i]}"
        file="${module_file_arr[$i]}"
        if [ -n "${name}" ] && [ -n "${desc}" ] && [ -n "${file}" ]; then
            echo "  「${current_file} ${name} time md5」           打包及发布「${desc}」"
            echo "  「${current_file} stop-${name}」               关闭「${desc}」"
            echo "  「${current_file} restart-${name}」            重启「${desc}」"
            echo "  「${current_file} revert-${name} {timestamp}」 还原「${desc}」"
            echo ""
        fi
    done
    echo -e "   \033[31m{timestamp} 若不记得请去 INSTALL.log 查看\033[0m"
}


case "$1" in
    restart)
        check "$2" "$3"
        compile

        for i in ${!module_name_arr[@]}; do
            if [ "1" = "${module_batch_arr[$i]}" ]; then
                name="${module_name_arr[$i]}"
                desc="${module_desc_arr[$i]}"
                file="${module_file_arr[$i]}"
                if [ "war" = "$(cut -d '|' -f 2 <<< "${file}")" ]; then
                    release_tomcat "${desc}" "$(cut -d '|' -f 3 <<< "${file}")" "$(cut -d '|' -f 1 <<< "${file}")"
                else
                    release_jar "${desc}" "${name}" "${file}"
                fi
            fi
        fone
        ;;

    *)
        for i in ${!module_name_arr[@]}; do
            name="${module_name_arr[$i]}"
            desc="${module_desc_arr[$i]}"
            file="${module_file_arr[$i]}"

            if [ "$1" = "${name}" ]; then
                check "$2" "$3"
                compile "${name}"
                if [ "war" = "$(cut -d '|' -f 2 <<< "${file}")" ]; then
                    release_tomcat "${desc}" "$(cut -d '|' -f 3 <<< "${file}")" "$(cut -d '|' -f 1 <<< "${file}")"
                else
                    release_jar "${desc}" "${name}" "${file}"
                fi
                exit 1
            elif [ "$1" = "stop-${name}" ]; then
                if [ "war" = "$(cut -d '|' -f 2 <<< "${file}")" ]; then
                    kill_tomcat "$(cut -d '|' -f 3 <<< "${file}")"
                else
                    kill_jar "${publish}/${file}/${file}.jar"
                fi
                exit 1
            elif [ "$1" = "restart-${name}" ]; then
                if [ "war" = "$(cut -d '|' -f 2 <<< "${file}")" ]; then
                    kill_tomcat "$(cut -d '|' -f 3 <<< "${file}")"
                    start_tomcat "$(cut -d '|' -f 3 <<< "${file}")"
                else
                    kill_jar "${publish}/${file}/${file}.jar"
                    start_jar "${publish}/${file}/${file}.jar" "gc-${name}.log"
                fi
                exit 1
            elif [ "$1" = "revert-${name}" ]; then
                if [ "war" = "$(cut -d '|' -f 2 <<< "${file}")" ]; then
                    revert_tomcat "${desc}" "$(cut -d '|' -f 3 <<< "${file}")" "$(cut -d '|' -f 1 <<< "${file}")" "$2"
                else
                    revert_jar "${desc}" "${name}" "${file}" "$2"
                fi
                exit 1
            fi
        done

        usage
esac
exit 1
#+END_SRC

部署从 mysql 同步数据进 es 的服务脚本(先在 ~/project 目录下建一个 application.yml, 内容参照: [[https://github.com/liuanxin/mysql2es/blob/master/src/main/resources/application-prod.yml][es-sync-config]])
#+BEGIN_SRC bash
#!/bin/env bash

jvm_args="-server"
jvm_args="${jvm_args} -Dfile.encoding=UTF-8 -Xms128m -Xmx128m -XX:+UseG1GC "
# jvm_args="${jvm_args} -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps"
jvm_args="${jvm_args} -Djava.security.egd=file:/dev/./urandom"

project="mysql2es"
release_path="/home/$(whoami)"
source="${release_path}/source"
publish="${release_path}/project"
log_path="${release_path}/logs"

version_url="https://github.com/liuanxin/${project}"

update() {
    if [ -d "${source}/${project}" ]; then
        cd "${source}/${project}"
        git pull
    else
        cd "${source}"
        git clone ${version_url}
        cd "${project}"
    fi
    
    log "当前分支 --> $(git rev-parse --abbrev-ref HEAD)"
    git log --pretty=format:'[%Cred%h%Creset] (%C(yellow)%ad%Creset) [%Cgreen%s%Creset] (%C(bold blue)%cr%Creset) <%Cred%an%Creset>' | head -n 10
}
compile() {
    cd "${source}/${project}"
    
    if [ -e "/etc/profile" ]; then
        source /etc/profile
    fi
    if [ -e "/etc/bashrc" ]; then
        source /etc/bashrc
    fi
    if [ -e "/etc/bash.bashrc" ]; then
        source /etc/bash.bashr
    fi
    mvn clean package -DskipTests || exit 1
}
kill_process() {
    process="$(ps aux | grep '${project}' | grep java | awk '{print $2}')"
    if [ -n "${process}" ]; then
        kill "${process}"
        check_process "${project}"
    fi
}
check_process() {
    sleep 2
    process="$(ps aux | grep ${1} | grep java | grep -v grep | awk '{print $2}')"
    if [ -n "${process}" ]; then
        log "进程 ${process} 还在"
        check_process "${1}"
    fi
}
release() {
    mkdir -p ${publish}/${project}
    rm -fr ${publish}/${project}/${project}.jar
    mv ${source}/${project}/target/${project}.jar ${publish}/${project}/${project}.jar

    cd ${publish}/${project}
    $(readlink -f /bin/java) ${jvm_args} -Dspring.config.location=${publish}/application.yml -Xloggc:${log_path}/gc-${project}-$(date +%F).log -jar ${publish}/${project}/${project}.jar &
    sleep 5
    ps aux | grep java | grep '${project}'
}

case "$1" in
    stop)
        kill_process
        echo "已杀掉 ${project} 进程"
        ps aux | grep '${project}' | grep java
        ;;
    *)
        update
        compile
        kill_process
        release
        ;;
esac
exit 1
#+END_SRC

-----

前端本地
#+BEGIN_SRC bash
#!/bin/env bash

print_error() {
  echo -e "\033[31m[error] ------------------------------------------------------------------------\033[0m"
  echo -e "\033[31m[error] $(date '+%Y-%m-%d %H:%M:%S.%3N') ==> ${1}\033[0m"
  echo -e "\033[31m[error] ------------------------------------------------------------------------\033[0m"
}
error_and_exit() {
  print_error "$1"
  exit 1
}
if [ "root" == "$(whoami)" ]; then
    error_and_exit "不要使用 root 运行此脚本! 请切换成普通用户!"
fi

print_info() {
    echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
    echo -e "\033[34m[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') ==> ${1}\033[0m"
    echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
}

now="$(date '+%Y-%m-%d-%H-%M-%S')"
file_name="hotel-${now}.tgz"
release_online="admin@ip:~/temp/"

yarn build || exit 1
tar acf ${file_name} dist
md5="$(md5sum ${file_name} | awk '{print $1}')"
print_info "压缩包(${file_name})的 md5 值是: ${md5}, 文件大小为: $(du -sh ${file_name} | awk '{print $1}')"
time scp ${file_name} ${release_online} || exit 1
rm -fr ${file_name}

print_info "「~/bash/hotel-release.sh rel ${now} ${md5}」"
#+END_SRC

各项目不同启动参数的版本
#+BEGIN_SRC bash
#!/bin/env bash

now="$(date '+%Y-%m-%d-%H-%M-%S')"
current_file="$(readlink -f $0)"

print_error() {
    echo -e "\033[31m[error] ------------------------------------------------------------------------\033[0m"
    echo -e "\033[31m[error] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}\033[0m" # 红
    echo -e "\033[31m[error] ------------------------------------------------------------------------\033[0m"
}
error_and_exit() {
    print_error "$1"
    exit 1
}

if [ "root" == "$(whoami)" ]; then
    error_and_exit "不要使用 root 运行此脚本! 请切换成普通用户!"
fi

check_directory() {
    if [ ! -d "${1}" ]; then
        error_and_exit "目录 ${1} 不存在, 无法完成此操作"
    fi
}
check_create_directory() {
    if [ ! -d "${1}" ]; then
        mkdir -p "$1"
    fi
}
check_file() {
    if [ ! -e "${1}" ]; then
        error_and_exit "文件 ${1} 不存在, 无法完成此操作"
    fi
}
log_in_file() {
    check_create_directory ${log_path}
    print_info "${1}"
    echo "$(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}" >> "${log_path}/INSTALL.log"
}
log() {
    echo "[INFO] ------------------------------------------------------------------------"
    echo -e "[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}"
    echo "[INFO] ------------------------------------------------------------------------"
}
print_info() {
    echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
    echo -e "\033[34m[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') : ${1}\033[0m" # 蓝. 30(黑), 32(绿), 33(黄), 35(紫), 36(天蓝), 37(白)
    echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
}


project="yec-backend"                    # 项目名
release_path="/home/$(whoami)"           # 发布目录
source="${release_path}/source"          # 源码目录
publish="${release_path}/project"        # 发布目录
backup="${release_path}/backup/project"  # 备份目录
log_path="${release_path}/logs"          # 日志目录

profile="prod"                           # 当前环境
backup_package="0"                       # 1 则备份发布时的旧包, 非 1 则不备份

jvm_args="${jvm_args} -server"
jvm_args="${jvm_args} -Dfile.encoding=UTF-8 -XX:+UseG1GC"
jvm_args="${jvm_args} -Djava.security.egd=file:/dev/./urandom"
jvm_args="${jvm_args} -Dspring.profiles.active=${profile}"


# module_name_arr+=("web-manager")
# module_desc_arr+=("给 后台管理系统 提供接口调用的服务")
# module_file_arr+=("web-manager-8383") # 文件名(不带后缀)|调试端口(可选)
# module_args_arr+=("-Xms512m -Xmx512m")
# module_batch_arr+=("1")

module_name_arr+=("web-open-api")
module_desc_arr+=("对接第三方设备的 web 服务")
module_file_arr+=("web-open-api-8686")
module_args_arr+=("-Xms1g -Xmx1g")
module_batch_arr+=("1")

module_name_arr+=("web-mini")
module_desc_arr+=("给 客户端小程序 提供接口调用的服务")
module_file_arr+=("web-mini-8787")
module_args_arr+=("-Xms2g -Xmx2g")
module_batch_arr+=("1")

module_name_arr+=("timing-task")
module_desc_arr+=("定时任务")
module_file_arr+=("timing-task")
module_args_arr+=("-Xms256m -Xmx256m")
module_batch_arr+=("0")


# 版本信息
version_url="http://ip:port/xx/yy"


# 从版本控制更新代码, 为打包做准备
update() {
    log "开始更新代码"
    check_create_directory "${source}"

    cd "${source}"
    if [ -d "${project}" ]; then
        cd "${project}"
        log "git pull"
        git pull
        log "代码拉取完成"
    else
        log "git clone ${version_url} ${project}"
        git clone ${version_url} ${project}
        log "代码克隆完成"
    fi
    log "当前分支 --> $(git rev-parse --abbrev-ref HEAD)"
    git log --pretty=format:'[%Cred%h%Creset] (%C(yellow)%ad%Creset) [%Cgreen%s%Creset] (%C(bold blue)%cr%Creset) <%Cred%an%Creset>' | head -n 10
}
# 使用 maven 编译打包代码
compile() {
    check_directory "${source}/${project}"

    log "开始打包代码"
    cd "${source}/${project}"
    source /etc/profile
    rm -fr ~/.m2/repository/com/smmdhao
    if [ "$*" != "" ]; then
        # echo "mvn -DskipTests clean package -pl $* -am"
        mvn -DskipTests clean package -pl "$*" -am
    else
        mvn -DskipTests clean package
    fi
    log "代码打包完成"
}

# 杀掉 jar 进程
kill_jar() {
    if [ "$#" != 1 ] || [ -z "$1" ]; then
        error_and_exit "usage: kill_jar \"运行的 jar 包路径\""
    fi
    process="$(ps aux | grep ${1} | grep java | grep -v grep | awk '{print $2}')"
    log "项目 ${1} 进程号: (${process})"
    if [ -n "${process}" ]; then
        log "杀掉 ${1} 进程: ${process}"
        kill "${process}"
        check_process "${1}"
    fi
}
check_process() {
    sleep 2
    process="$(ps aux | grep ${1} | grep java | grep -v grep | awk '{print $2}')"
    if [ -n "${process}" ]; then
        log "进程 ${process} 还在"
        check_process "${1}"
    fi
}
# 启动 jar 进程
start_jar() {
    if [ "$#" -lt 2 ] || [ -z "$1" ] || [ -z "$2" ]; then
        error_and_exit "usage: start_jar \"运行的 jar 包路径\" \"gc 文件名\" \"jvm_args(可选)\" \"调试端口(可选)\""
    fi

    check_file "$1"
    tmp_jvm_args="${jvm_args} $3"
    if [ -n "$4" ]; then
        tmp_jvm_args="${tmp_jvm_args} -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$3"
    fi
    
    $(readlink -f /bin/java) ${tmp_jvm_args} -jar ${1} &
    sleep 5
    log "进程 ${1} 信息:\n$(ps aux | grep -v grep | grep java | grep --color=auto ${1})"
}
# 发布 jar 包项目
release_jar() {
    check_directory "${source}"
    if [ "$#" != 4 ] || [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
        error_and_exit "usage: release_jar \"发布包文字说明\" \"模块名\" \"文件名(不带后缀)\" \"jvm_args\""
    fi
    comment="$1"
    package="$2"
    file_name="$(cut -d '|' -f 1 <<< "$3")"
    debug_port="$(cut -d '|' -f 2 <<< "$3")"
    if [ "${file_name}" = "${debug_port}" ]; then
        debug_port=""
    fi
    project_jvm_args="$4"

    suffix="jar"
    release="${source}/${project}/${package}/target/${file_name}.${suffix}"
    if [ ! -e "${release}" ]; then
        error_and_exit "没有此发布包: ${release}, 请确认是否有打包代码"
    fi

    check_create_directory ${publish}/${file_name}
    current_release="${publish}/${file_name}/${file_name}.${suffix}"
    backup_release="${backup}/${file_name}-${now}.${suffix}"

    log "开始发布「${comment}」"
    backup_project "${current_release}" "${backup_release}" "revert_${package}"
    kill_jar "${current_release}"
    rm -fr "${current_release}"
    mv "${release}" "${current_release}"
    start_jar "${current_release}" "gc-${file_name##*/}.log" "${project_jvm_args}" "${debug_port}"
    log "「${comment}」发布完成"
}
# 还原 jar 包项目
revert_jar() {
    if [ "$#" != 4 ] || [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
        error_and_exit "usage: revert_jar \"还原包文字说明\" \"模块名\" \"文件名(不带后缀)\" \"还原包的时间戳\""
    fi
    comment="$1"
    package="$2"
    file_name="$3"
    time="$4"

    suffix="jar"
    backup_file="${backup}/${file_name}-${time}.${suffix}"
    if [ ! -e "${backup_file}" ]; then
        error_and_exit "没有此还原包: ${backup_file}"
    fi

    current_release="${publish}/${file_name}/${file_name}.${suffix}"

    log "开始还原「${comment}」"
    kill_jar "${current_release}"
    rm -fr "${current_release}"
    cp -R "${backup_file}" "${current_release}"
    start_jar "${current_release}" "gc-${package##*/}.log"
    log "「${comment}」还原完成"
}

# 备份现有的发布包
backup_project() {
    if [ "${backup_package}" = "1" ]; then
        check_create_directory ${backup}
        if [ "$#" != 3 ] || [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
            error_and_exit "usage: backup_project \"发布包文件路径\" \"备份的文件路径\" \"还原指令\""
        fi
        if [ -e "${1}" ]; then
            log "复制包 => cp ${1} ${2}"
            cp "${1}" "${2}"

            log "删除 7 天前的备份文件 => find ${backup} -mtime +7 -type f | grep -v "${2}" | xargs rm -fr"
            find "${backup}" -mtime +7 -type f | grep -v "${2}" | xargs rm -fr
            log_in_file "运行 ${current_file} ${3} ${now} 还原之前的「${1}」版本"
        fi
    fi
}
usage() {
    echo "usage:"
    echo "  「${current_file} restart」     打包及发布 web 服务"
    echo ""
    for i in ${!module_name_arr[@]}; do
        name="${module_name_arr[$i]}"
        desc="${module_desc_arr[$i]}"
        file="${module_file_arr[$i]}"
        if [ -n "${name}" ] && [ -n "${desc}" ] && [ -n "${file}" ]; then
            echo "  「${current_file} ${name}」                    打包及发布「${desc}」"
            echo "  「${current_file} stop-${name}」               停止「${desc}」"
            echo "  「${current_file} restart-${name}」            重启「${desc}」"
            echo "  「${current_file} revert-${name} {timestamp}」 还原「${desc}」"
            echo ""
        fi
    done
    echo -e "   \033[31m{timestamp} 若不记得请去 ${log_path}/INSTALL.log 查看\033[0m"
}


case "$1" in
    restart)
        update
        compile

        for i in ${!module_name_arr[@]}; do
            if [ "1" = "${module_batch_arr[$i]}" ]; then
                name="${module_name_arr[$i]}"
                desc="${module_desc_arr[$i]}"
                file="${module_file_arr[$i]}"
                args="${module_args_arr[$i]}"
                
                release_jar "${desc}" "${name}" "${file}" "${args}"
            fi
        done
        log_in_file "================================================"
        ;;

    *)
        for i in ${!module_name_arr[@]}; do
            name="${module_name_arr[$i]}"
            desc="${module_desc_arr[$i]}"
            file="${module_file_arr[$i]}"
            args="${module_args_arr[$i]}"

            if [ "$1" = "${name}" ]; then
                update
                compile "${name}"
                release_jar "${desc}" "${name}" "${file}" "${args}"
                exit 1
            elif [ "$1" = "stop-${name}" ]; then
                kill_jar "${publish}/${file}/${file}.jar"
                exit 1
            elif [ "$1" = "restart-${name}" ]; then
                file_name="$(cut -d '|' -f 1 <<< "$name")"
                debug_port="$(cut -d '|' -f 2 <<< "$name")"
                if [ "${file_name}" = "${debug_port}" ]; then
                    debug_port=""
                fi
                kill_jar "${publish}/${file}/${file}.jar"
                start_jar "${publish}/${file}/${file}.jar" "gc-${file_name}.log" "${args}" "${debug_port}"
                exit 1
            elif [ "$1" = "revert-${name}" ]; then
                revert_jar "${desc}" "${name}" "${file}" "$2"
                exit 1
            fi
        done

        usage
esac
exit 1
#+END_SRC

前端线上
#+BEGIN_SRC bash
#!/bin/env bash

print_error() {
  echo -e "\033[31m[error] ------------------------------------------------------------------------\033[0m"
  echo -e "\033[31m[error] $(date '+%Y-%m-%d %H:%M:%S.%3N') ==> ${1}\033[0m"
  echo -e "\033[31m[error] ------------------------------------------------------------------------\033[0m"
}
error_and_exit() {
  print_error "$1"
  exit 1
}
if [ "root" == "$(whoami)" ]; then
    error_and_exit "不要使用 root 运行此脚本! 请切换成普通用户!"
fi

print_info() {
  echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
  echo -e "\033[34m[INFO] $(date '+%Y-%m-%d %H:%M:%S.%3N') ==> ${1}\033[0m"
  echo -e "\033[34m[INFO] ------------------------------------------------------------------------\033[0m"
}
log_in_file() {
  print_info "${1}"
  echo "${now} : ${1}" >> ~/logs/INSTALL.log
}

release() {
  if [ "$#" -lt 2 ] || [ -z "$1" ] || [ -z "$2" ]; then
    error_and_exit "usage: check \"发布的时间戳\" \"压缩包的 md5 值\""
  fi

  current_file="$(readlink -f $0)"
  now="$(date '+%Y-%m-%d-%H-%M-%S')"
  back_file_name="hotel-${now}.tgz"

  cd ~/temp/
  file_name="hotel-${1}.tgz"
  if [ ! -e "${file_name}" ]; then
    error_and_exit "没有相关的文件, 不能发布"
  fi

  md5=$(md5sum ${file_name} | awk '{print $1}')
  print_info "file md5 info: ${md5}"
  print_info "send md5 info: ${2}"
  if [ "${md5}" != "${2}" ]; then
      error_and_exit "文件的 md5 与传入的值不一致!"
  fi

  cd ~/web/
  tar acf ${back_file_name} hotel
  mv ${back_file_name} ~/backup/project/

  cd ~/temp
  tar axf ${file_name}
  cd dist
  rm -fr ~/web/hotel/*
  mv * ~/web/hotel/
  print_info "发布成功"
  cd ../
  rm -fr dist ${file_name}
  log_in_file "运行 ${current_file} revert ${now} 还原之前的「${1}」版本"
}

restore() {
  if [ "$#" -lt 1 ] || [ -z "$1" ]; then
    error_and_exit "usage: check \"备份的时间戳\""
  fi

  back_file_name="hotel-${1}.tgz"
  cd ~/backup/project
  if [ ! -e "${back_file_name}" ]; then
    error_and_exit "没有相关的备份文件, 不能还原"
  fi

  tar axf ${back_file_name}
  cd hotel
  rm -fr ~/web/hotel/
  mv * ~/web/hotel/
  print_info "还原成功"
}

case "$1" in
  rel)
    release "$2" "$3"
    ;;
  res)
    restore "$2"
    ;;
  *)
    echo "usage:"
    echo "  「${current_file}  rel  发布的时间戳  发布包的 md5 值」  发布"
    echo "  「${current_file}  res  发布包的 md5 值」  还原"
esac
#+END_SRC
