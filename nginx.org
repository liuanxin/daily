
[[http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html][访问认证]]

#+BEGIN_SRC conf
auth_basic           "访问需要认证"; # off 表示不认证
auth_basic_user_file /path/auth_file;
#+END_SRC

上面的配置可以放在 server 或 location 中.

auth_file 中一行表示一个用户: user:password:comment  后面的说明 :comment 可以省略

密码可以有多种方式生成:
1. openssl passwd -crypt "666666" 生成的密码 --> user:U36F4KZWRaiWw
2. htpasswd -n "user"   回车后会输入两次密码 --> user:$apr1$DRYVQbqY$HmuXkpWbXVxQ/Mg1t6Dw0.


压缩
#+BEGIN_SRC conf
gzip                on;
gzip_min_length     1k;
gzip_comp_level     6;
gzip_proxied        expired no-cache no-store private auth;
gzip_types          text/plain text/css application/javascript application/xml application/json;
#+END_SRC

alias 和 root 的区别点如下(引自 http://www.wkii.org/nginx-set-directory-alias-and-root.html):
#+BEGIN_SRC conf
location /abc {
    alias /opt/html/abc/;
}
#+END_SRC

基于上面的配置, hxxp://test/abc/a.html 指定的是 /opt/html/abc/a.html, 也可以改成
#+BEGIN_SRC conf
location /abc {
    root /opt/html/;
}
#+END_SRC

使用 root 设置目录的绝对路径时, 少了 /abc, 也就是说, 使用 root 来设置前端非根目录时, nginx 会组合 root 和 location 的路径.
另外, 如果使用了二级目录 /picture/ 之后, 后面的全局匹配不能使用 location ~ / {} 这种方式(也就是不能加 ~), 不然 /picture 会往后面的 / 去匹配!
#+BEGIN_SRC conf
~      区分大小写匹配
~*    不区分大小写匹配
!~     区分大小写不匹配
!~*   不区分大小写不匹配
#+END_SRC


nginx 配置 cors(在 server 或 location 中添加都可以)
#+BEGIN_SRC conf
# 允许哪个域名来访问资源. 使用 * 有些时候还是会被浏览器拒绝
add_header 'Access-Control-Allow-Origin' '$http_origin';

# 是否允许发送 Cookie
add_header 'Access-Control-Allow-Credentials' 'true';

# 请求结果的有效期时间是多少, 单位秒
# add_header 'Access-Control-Max-Age' '1800';

# 服务器支持的所有头信息字段
add_header 'Access-Control-Allow-Headers' '*';

# 允许获取头信息里面的白名单. XMLHttpRequest.getResponseHeader() 只能拿到 6 个基本字段: Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma, 要添加使用此配置
# add_header 'Access-Control-Expose-Headers' 'tcd';

# 服务器支持的所有跨域请求的方法
add_header 'Access-Control-Allow-Methods' 'HEAD, GET, POST, PUT, DELETE, OPTIONS, PATCH, TRACE';


精简
add_header 'Access-Control-Allow-Origin' '$http_origin';
add_header 'Access-Control-Allow-Credentials' 'true';
add_header 'Access-Control-Allow-Headers' '*';
add_header 'Access-Control-Allow-Methods' 'HEAD, GET, POST, PUT, DELETE, OPTIONS';
#+END_SRC


让 nginx 在 windows 下运行关闭重启的脚本, 保存成 nginx.bat 放到 nginx.exe 同级目录, 以后操作 nginx 都基于当前脚本:
#+BEGIN_SRC bat
echo off
title 启动关闭 nginx

:main
    cls
    nginx.exe -v
    echo.
    echo. 1 - 启动 nginx
    echo. 2 - 关闭 nginx
    echo. 3 - 重启 nginx(或直接回车)
    echo. 4 - 重新加载 nginx
    echo. 5 - 测试 nginx 配置
    echo. 0 - 退出
    echo.

    set input=
    set /p input=请选择:
    if /i '%input%' == '1' goto start_nginx
    if /i '%input%'=='2' goto close_nginx
    if /i '%input%' == '' || '%input%'=='3' goto restart_nginx
    if /i '%input%'=='4' goto reload_nginx
    if /i '%input%'=='5' goto test_nginx
    if /i '%input%'=='0' goto exit_nginx
    cls
    echo.
    pause
    goto main

:exit_nginx
    exit

:start_nginx
    cls
    echo 启动 nginx
    echo.
    start nginx.exe
    echo.
    pause
    goto main

:close_nginx
    cls
    echo 关闭 nginx
    echo.
    nginx.exe -s quit
    echo.
    pause
    goto main

:restart_nginx
    cls
    echo 重启 nginx
    echo.
    nginx.exe -s quit
    echo.
    start nginx.exe
    echo.
    pause
    goto main

:reload_nginx
    cls
    echo 重新加载 nginx
    echo.
    nginx.exe -s reload
    echo.
    pause
    goto main

:test_nginx
    cls
    echo 测试 nginx 配置
    echo.
    nginx.exe -t
    echo.
    pause
    goto main
#+END_SRC

限流:
+ ~http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html~
+ ~http://nginx.org/en/docs/http/ngx_http_limit_req_module.html~

#+BEGIN_SRC conf
# 连接设置
limit_conn_zone $binary_remote_addr  zone=conn_ip:10m;      # 生成一个大小为 10M 名字为 conn_ip 用来存储 ip 地址访问频次的内存区域(加 $binary_ 的更省空间)
limit_conn_zone $server_name         zone=conn_server:10m;  # 生成一个大小为 10M 名字为 conn_server 用来存储域名访问频次的内存区域

# 请求设置(连接如果使用 keepalive, 一个连接将可以发起多个请求)
limit_req_zone  $binary_remote_addr  zone=req_ip:10m rate=20r/s;      # 单个 ip 的处理速度最多 20 请求/秒
limit_req_zone  $server_name         zone=req_server:10m rate=50r/s;  # 单个域名的处理速度最多 50 请求/秒


# 上面的只能在 http 中, 下面的可以在 http server location 中(对应全局, 单个域名, 单个域名的目录)


limit_conn conn_ip 20;       # 单个 ip 最多发起 20 连接/秒
limit_conn conn_server 100;  # 单个域名最多接受 100 连接/秒
limit_conn_status 503;       # 超出上面的设定返回的状态, 不设置则默认 503

limit_req  zone=req_ip burst=30 nodelay;       # 单个 ip 最多发起 20 请求/秒, 超出则放入队列(长度 30), 用了 nodelay 后加进队列的请求会立即处理(一般只在 ip 上加就好了)
limit_req  zone=req_server burst=200 nodelay;  # 单个域名最多接受 50 请求/秒, 超出则放入队列(长度 200, 默认长度为 0)
limit_req_status 503;                          # 超出上面的设置返回的状态, 不设置则默认 503
#+END_SRC

example: /etc/nginx/conf.d/xxx.conf
#+BEGIN_SRC conf
# /etc/hosts
# 127.0.0.1   api.xxx.com
# 127.0.0.1   static.xxx.com

upstream api {
    server 127.0.0.1:8686;
}


limit_conn_zone $binary_remote_addr  zone=conn_ip:20m;
limit_conn_zone $server_name         zone=conn_server:20m;
limit_req_zone  $binary_remote_addr  zone=req_ip:20m rate=20r/s;
limit_req_zone  $server_name         zone=req_server:20m rate=50r/s;


server {
    listen 80;
    server_name api.xxx.com;

    location = /favicon.ico {
        alias /home/producer/web/favicon.ico;
    }
    location = /robots.txt {
        alias /home/producer/web/robots.txt;
    }
    location / {

        limit_conn conn_ip 20;
        limit_conn conn_server 100;
        limit_req  zone=req_ip burst=50 nodelay;
        limit_req  zone=req_server burst=200;

        proxy_pass http://api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Redirect non-https traffic to https
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 443 ssl http2; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/api.xxx.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/api.xxx.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    listen 80;
    server_name static.xxx.com;
    root /home/producer/web/static;

    add_header 'Access-Control-Allow-Origin' '$http_origin';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Headers' '*';
    add_header 'Access-Control-Allow-Methods' 'HEAD, GET, POST, PUT, DELETE, OPTIONS';

    location = /favicon.ico {
        alias /home/producer/web/favicon.ico;
    }
    location = /robots.txt {
        alias /home/producer/web/robots.txt;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/api.xxx.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/api.xxx.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
#+END_SRC

二级目录配置: /etc/nginx/default.d/xxx.conf
#+BEGIN_SRC conf
location /api {
    proxy_pass http://127.0.0.1:8686/; # 要有最后的 /, 如果不加, 将会加上上面的 /api 地址
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}
location /boss {
    alias /home/admin/web/boss;
}
location /static {
    alias /home/admin/web/static;
}
#+END_SRC
