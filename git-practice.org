** 分支说明

+ master: 主要用于正式发布. 每增加一个版本都要打上一个 tag 并给定版本
+ develop: 主要用于日常开发. 每次都推送到这个分支上来
  
+ feature: 功能分支(临时). 基于 develop 创建, 完成后合并回 develop 并删除此分支(只在本地即可, 如果远程也有, 删除时需要删除远程分支)
+ release: 预发布分支(临时). 基于 develop 创建, 完成后合并回 master(并打一个 tag) 和 develop 并删除此分支(只在本地即可, 如果远程也有, 删除时需要删除远程分支)
+ hotfix: 修复分支(临时). 基于 master 创建, 当 master 发现 bug 时创建, 处理完合并回 master 和 develop 并删除此分支(只在本地即可, 如果远程也有, 删除时需要删除远程分支)


** 开发实践

+ 基于 gogs 建立项目. git 会自动在远程建立一个 master 分支. 这是初始状态 *(1)*
+ 将项目 clone 到本地, 此时本地会有一个 master 分支 ==> *开发人员和仓库负责人都要操作这一步 (2)*
#+BEGIN_SRC bash
git clone http://url:port/user/project.git
#+END_SRC

+ 基于当前本地分支(master)创建本地的 develop 分支 ==> *仓库负责人操作 (3)*
#+BEGIN_SRC bash
git branch develop <==> git checkout -b develop master # <==> 表示左右两边的意思等同
#+END_SRC

+ 将本地 develop 分支推到远程(然后远程会有两个分支: master 和 develop) ==> *仓库负责人操作 (4)*
#+BEGIN_SRC bash
git push -u origin develop
#+END_SRC

+ 基于本地 develop 建一个本地 feature 分支(用个人命名) ==> /开发人员操作/ *(5)*
#+BEGIN_SRC bash
git checkout -b liujie develop
#+END_SRC

+ +(可选, 这一步可以不需要)将本地 feature 分支推到远程+ *(6)*
#+BEGIN_SRC bash
git push -u origin liujie
#+END_SRC

+ 本地开发 & 提交代码 ==> /开发人员操作/  *(7)*
#+BEGIN_SRC bash
git commit -a -m "xxx" <==> git add . & git commit -m "xxx" # <==> 表示左右两边的意思等同
#+END_SRC

+ 从远程 develop 分支拉取代码(pull 等同于先 fetch, 再与当前分支合并) ==> /开发人员操作/ *(8)*
#+BEGIN_SRC bash
git pull origin develop <==> git fetch origin develop & git merge liujie # <==> 表示左右两边的意思等同
#+END_SRC

+ 基于当前本地 feature 分支向远程的 develop 分支推送代码 ==> /开发人员操作/ *(9)*
#+BEGIN_SRC bash
git push origin develop
#+END_SRC

+ +(可选, 这一步可以不需要)删除本地和跟本地对应的远程分支+ *(10)*
#+BEGIN_SRC bash
git branch -d liujie & git push origin --delete liujie
#+END_SRC

+ 从远程 develop 分支拉取代码 ==> *仓库负责人操作*  *(11)*
#+BEGIN_SRC bash
git checkout develop
git pull
#+END_SRC

+ 切换回本地 master 分支, 并将本地 develop 分支合并到本地 master 分支 ==> *仓库负责人操作* *(12)*
#+BEGIN_SRC bash
git checkout master
git merge --no-ff develop     # --no-ff 是指不使用 fast-forward 方式合并, 保留分支的 commit 历史
# git merge --squash develop  # 使用 squash 方式合并，把多次分支 commit 历史压缩为一次
#+END_SRC

+ 基于本地 master 分支打一个 tag 并给一个说明 ==> *仓库负责人操作* *(13)*
#+BEGIN_SRC bash
git tag -a v1.0.0 -m "更新内容" master
#+END_SRC

+ 基于本地 master 分支向远程 master 分支推送, 并将 tag 推送至远程 ==> *仓库负责人操作* *(14)*
#+BEGIN_SRC bash
git push
git push --tags
#+END_SRC


*其中, 第 2 ~ 4、11 ~ 14 步由仓库的负责人来操作(2 和 4 只需要做一次, 11 ~ 14 是要发布时需要做的).  \\
第 2、5、7 ~ 9 步由具体的开发人员操作(2 和 5 只需要做一次, 7 ~ 9 是日常的开发), 第 6、10 步不需要操作.*

PS: 第 12 步操作完之后, 原先基于 develop 的 commit 记录也会被写进 master 的记录里面去.  \\
这时候可以使用 ~git rebase -i --autosquash~ 只保留最新的那条 commit 记录, 也可以在 第 12 步直接使用 ~git merge --squash develop~


** Shxt
*版本控制还是蛮复杂的, 所以才有了 git flow 这一类的工具. 但是大致的实践是基于上面的步骤来的*

我想起 [[http://www.yinwang.org/blog-cn/2015/03/03/how-to-respect-a-programmer][这里]] 最后一段关于 git 的说明
#+BEGIN_QUOTE
Git 是现在最流行的代码版本控制工具。用外行话说，Git 就是一个代码的“仓库”或者“保管”，这样很多人修改了代码之后，可以知道是谁改了哪一块。其实不管什么工具，不管是编辑器，程序语言，还是版本控制工具，比起程序员的核心思想来，都是次要的东西，都是起辅助作用的。可是 Git 这工具似乎特别惹人恼火。

Git 并不像很多人吹嘘的那么好用，其中有明显的蹩脚设计。跟 Unix 的传统一脉相承，Git 没有一个良好的包装，设计者把自己的内部实现细节无情地泄露给了用户，让用户需要琢磨者设计者内部到底怎么实现的，否则很多时候不知道该怎么办。用户被迫需要记住挺多稀奇古怪的命令，而且命令行的设计也不怎么合理，有时候你需要加-f之类的参数，各个参数的位置可能不一致，而且加了还不一定能起到你期望的效果。各种奇怪的现象，比如"head detached"，都强迫用户去了解它内部是怎么设计的。随着 Git 版本的更新，新的功能和命令不断地增加，后来你终于看到命令行里出现了 foreach，才发现它的命令行就快变成一个（劣质的）程序语言。如果你了解 ydiff 的设计思想，就会发现 Git 之类基于文本的版本控制工具，其实属于古代的东西。然而很多人把 Git 奉为神圣，就因为它是 Linus Torvalds 设计的。

Git 最让人恼火的地方并不是它用起来麻烦，而是它的“资深用户”们居高临下的态度给你造成的心理阴影。好些人因为自己“精通 Git”就以为高人一等，摆出一副专家的态度。随着用户的增加，Git 最初的设计越来越被发现不够用，所以一些约定俗成的规则似乎越来越多，可以写成一本书！跟 Unix 的传统一脉相承，Git 给你很多可以把自己套牢的“机制”，到时候出了问题就怪你自己不知道。所以你就经常听有人煞有介事的说：“并不是 Git 允许你这么做，你就可以这么做的！Unix 的哲学是不阻止傻人做傻事……” 如果你提交代码时不知道 Git 用户一些约定俗成的规则，就会有人嚷嚷：“rebase 了再提交！” “不要 push 到 master！” “不要 merge！” “squash commits！” 如果你不会用 git submodule 之类的东西，有人可能还会鄙视你，说：“你应该知道这些！”

打个比方，这样的嚷嚷给人的感觉是，你得了奥运会金牌之后，把练习用的器材还回到器材保管科，结果管理员对你大吼：“这个放这边！那个放那边！懂不懂规矩啊你？” 看出来问题了吗？程序员提交了有高价值的代码（奥运金牌），结果被一些自认为 Git 用的很熟的人（器材保管员）厉声呵斥。

一个尊重程序员的公司文化，就应该把程序员作为运动健将，把程序员的代码放在尊贵的地位。其它的工具，都应该像器材保管科一样。我们尊重这些器材保管员，然而如果运动员们不懂你制定的器材摆放规矩，也应该表示出尊重和理解，说话应该和气有礼貌，不应该骑到他们头上。所以，对于 Git 的一些命令和用法，我建议大家向新手介绍时，这样开场：“你本来不该知道这些的，可是现在我们没有更好的工具，所以得这样弄一下……”
#+END_QUOTE
