** 分支说明

+ master: 主要用于正式发布. 每增加一个版本都要打上一个 tag 并给定版本
+ develop: 主要用于日常开发. 每次都推送到这个分支上来
  
+ feature: 功能分支(临时). 基于 develop 创建, 完成后合并回 develop 并删除此分支(只在本地即可, 如果远程也有, 删除时需要删除远程分支)
+ release: 预发布分支(临时). 基于 develop 创建, 完成后合并回 master(并打一个 tag) 和 develop 并删除此分支(只在本地即可, 如果远程也有, 删除时需要删除远程分支)
+ hotfix: 修复分支(临时). 基于 master 创建, 当 master 发现 bug 时创建, 处理完合并回 master 和 develop 并删除此分支(只在本地即可, 如果远程也有, 删除时需要删除远程分支)


** 开发实践

+ 基于 gogs 建立项目. git 会自动在远程建立一个 master 分支. 这是初始状态 *(1)*
+ 将项目 clone 到本地, 此时本地会有一个 master 分支 ==> *开发人员和仓库负责人都要操作这一步 (2)*
#+BEGIN_SRC bash
git clone http://url:port/user/project.git
#+END_SRC

+ 基于当前本地分支(master)创建本地的 develop 分支 ==> *仓库负责人操作 (3)*
#+BEGIN_SRC bash
git branch develop <==> git checkout -b develop master # <==> 表示左右两边的意思等同
#+END_SRC

+ 将本地 develop 分支推到远程(然后远程会有两个分支: master 和 develop) ==> *仓库负责人操作 (4)*
#+BEGIN_SRC bash
git push -u origin develop
#+END_SRC

+ 基于本地 develop 建一个本地 feature 分支(用个人命名) ==> _开发人员操作_ *(5)*
#+BEGIN_SRC bash
git checkout -b liujie develop
#+END_SRC

+ (可选, 这一步可以不需要)将本地 feature 分支推到远程 *(6)*
#+BEGIN_SRC bash
git push -u origin liujie
#+END_SRC

+ 本地开发 & 提交代码 ==> _开发人员操作_  *(7)*
#+BEGIN_SRC bash
git commit -a -m "xxx" <==> git add . & git commit -m "xxx" # <==> 表示左右两边的意思等同
#+END_SRC

+ 从远程 develop 分支拉取代码(pull 等同于先 fetch, 再与当前分支合并) ==> _开发人员操作_ *(8)*
#+BEGIN_SRC bash
git pull origin develop <==> git fetch origin develop & git merge liujie # <==> 表示左右两边的意思等同
#+END_SRC

+ 基于当前本地 feature 分支向远程的 develop 分支推送代码 ==> _开发人员操作_ *(9)*
#+BEGIN_SRC bash
git push origin develop
#+END_SRC

+ (可选, 这一步可以不需要)删除本地和跟本地对应的远程分支 *(10)*
#+BEGIN_SRC bash
git branch -d liujie & git push origin --delete liujie
#+END_SRC

+ 从远程 develop 分支拉取代码 ==> *仓库负责人操作*  *(11)*
#+BEGIN_SRC bash
git checkout develop
git pull
#+END_SRC

+ 切换回本地 master 分支, 并将本地 develop 分支合并到本地 master 分支 ==> *仓库负责人操作* *(12)*
#+BEGIN_SRC bash
git checkout master
git merge --no-ff develop
#+END_SRC

+ 基于本地 master 分支打一个 tag 并给一个说明 ==> *仓库负责人操作* *(13)*
#+BEGIN_SRC bash
git tag -a v1.0.0 -m "更新内容" master
#+END_SRC

+ 基于本地 master 分支向远程 master 分支推送, 并将 tag 推送至远程 ==> *仓库负责人操作* *(14)*
#+BEGIN_SRC bash
git push
git push --tags
#+END_SRC


*其中, 第 2 ~ 4、11 ~ 14 步由仓库的负责人来操作(2 和 4 只需要做一次, 11 ~ 14 是要发布时需要做的).  \\
第 2、5、7 ~ 9 步由具体的开发人员操作(2 和 5 只需要做一次, 7 ~ 9 是日常的开发).*

PS: 第 12 步操作完之后, 原先基于 develop 的 commit 记录也会被写进 master 的记录里面去.  \\
这时候可以使用 ~git rebase -i --autosquash~ 只保留最新的那条 commit 记录(其他的被合并了)

*git 实在是挺复杂的, 多用 git flow*
